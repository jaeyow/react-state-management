{"ast":null,"code":"import _initializerDefineProperty from \"/Users/josereyes/Dev/react-state-management/mobx/counter/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"/Users/josereyes/Dev/react-state-management/mobx/counter/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"/Users/josereyes/Dev/react-state-management/mobx/counter/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _temp;\n\nimport { observable, action } from 'mobx';\nlet CounterStore = (_class = (_temp = class CounterStore {\n  constructor() {\n    _initializerDefineProperty(this, \"counter\", _descriptor, this);\n\n    this.increment = () => {\n      this.counter = this.counter + 1;\n    };\n\n    _initializerDefineProperty(this, \"decrement\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"incrementIfOdd\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"incrementAsync\", _descriptor4, this);\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"counter\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return 0;\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"decrement\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return () => {\n      this.counter = this.counter - 1;\n    };\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"incrementIfOdd\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return () => {\n      if (this.counter % 2 !== 0) {\n        this.increment();\n      }\n    };\n  }\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"incrementAsync\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return () => {\n      setTimeout(this.increment, 1000);\n    };\n  }\n})), _class);\nexport { CounterStore as default };","map":{"version":3,"sources":["/Users/josereyes/Dev/react-state-management/mobx/counter/src/counterStore.js"],"names":["observable","action","CounterStore","increment","counter","setTimeout"],"mappings":";;;;;;AAAA,SAAQA,UAAR,EAAoBC,MAApB,QAAiC,MAAjC;IAEqBC,Y,sBAAN,MAAMA,YAAN,CAAmB;AAAA;AAAA;;AAAA,SAIjCC,SAJiC,GAIrB,MAAM;AACjB,WAAKC,OAAL,GAAe,KAAKA,OAAL,GAAe,CAA9B;AACA,KANgC;;AAAA;;AAAA;;AAAA;AAAA;;AAAA,C,iFAChCJ,U;;;;;WAAqB,C;;6EAOrBC,M;;;;;WACW,MAAM;AACjB,WAAKG,OAAL,GAAe,KAAKA,OAAL,GAAe,CAA9B;AACA,K;;kFAEAH,M;;;;;WACgB,MAAM;AACtB,UAAI,KAAKG,OAAL,GAAe,CAAf,KAAqB,CAAzB,EAA4B;AAC3B,aAAKD,SAAL;AACA;AACC,K;;kFAEAF,M;;;;;WACgB,MAAM;AACxBI,MAAAA,UAAU,CAAC,KAAKF,SAAN,EAAiB,IAAjB,CAAV;AACE,K;;;SAvBiBD,Y","sourcesContent":["import {observable, action} from 'mobx';\n\nexport default class CounterStore {\n\t@observable counter = 0;\n\n\t// @action\n\tincrement = () => {\n\t\tthis.counter = this.counter + 1;\n\t};\n\n\t@action\n\tdecrement = () => {\n\t\tthis.counter = this.counter - 1;\n\t}\n\n\t@action\n\tincrementIfOdd = () => {\n\t\tif (this.counter % 2 !== 0) {\n\t\t\tthis.increment();\n\t\t}\n\t  }\n\n\t  @action\n\t  incrementAsync = () => {\n\t\tsetTimeout(this.increment, 1000)\n\t  }\n}"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _initializerDefineProperty from \"/Users/josereyes/Dev/react-state-management/mobx/counter/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"/Users/josereyes/Dev/react-state-management/mobx/counter/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"/Users/josereyes/Dev/react-state-management/mobx/counter/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _descriptor2, _temp;\n\nimport { observable, computed, reaction, action } from 'mobx';\nlet CounterStore = (_class = (_temp = class CounterStore {\n  constructor() {\n    _initializerDefineProperty(this, \"counter\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"increment\", _descriptor2, this);\n  }\n\n  // @action.bound\n  decrement() {\n    this.counter = this.counter - 1;\n  } // @action.bound\n\n\n  incrementIfOdd() {\n    if (this.counter % 2 !== 0) {\n      this.increment();\n    }\n  }\n\n  incrementAsync() {\n    setTimeout(this.increment, 2000);\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"counter\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return 0;\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"increment\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return () => {\n      this.counter = this.counter + 1;\n    };\n  }\n})), _class);\nexport { CounterStore as default };","map":{"version":3,"sources":["/Users/josereyes/Dev/react-state-management/mobx/counter/src/counterStore.js"],"names":["observable","computed","reaction","action","CounterStore","decrement","counter","incrementIfOdd","increment","incrementAsync","setTimeout"],"mappings":";;;;;;AAAA,SAAQA,UAAR,EAAoBC,QAApB,EAA8BC,QAA9B,EAAwCC,MAAxC,QAAqD,MAArD;IAEqBC,Y,sBAAN,MAAMA,YAAN,CAAmB;AAAA;AAAA;;AAAA;AAAA;;AAQjC;AACAC,EAAAA,SAAS,GAAI;AACZ,SAAKC,OAAL,GAAe,KAAKA,OAAL,GAAe,CAA9B;AACA,GAXgC,CAajC;;;AACAC,EAAAA,cAAc,GAAG;AAChB,QAAI,KAAKD,OAAL,GAAe,CAAf,KAAqB,CAAzB,EAA4B;AAC3B,WAAKE,SAAL;AACA;AACC;;AAEDC,EAAAA,cAAc,GAAG;AAClBC,IAAAA,UAAU,CAAC,KAAKF,SAAN,EAAiB,IAAjB,CAAV;AACE;;AAtB8B,C,iFAChCR,U;;;;;WAAqB,C;;6EAErBG,M;;;;;WACW,MAAM;AACjB,WAAKG,OAAL,GAAe,KAAKA,OAAL,GAAe,CAA9B;AACA,K;;;SANmBF,Y","sourcesContent":["import {observable, computed, reaction, action} from 'mobx';\n\nexport default class CounterStore {\n\t@observable counter = 0;\n\n\t@action\n\tincrement = () => {\n\t\tthis.counter = this.counter + 1;\n\t};\n\n\t// @action.bound\n\tdecrement () {\n\t\tthis.counter = this.counter - 1;\n\t}\n\n\t// @action.bound\n\tincrementIfOdd() {\n\t\tif (this.counter % 2 !== 0) {\n\t\t\tthis.increment();\n\t\t}\n\t  }\n\n\t  incrementAsync() {\n\t\tsetTimeout(this.increment, 2000)\n\t  }\n}"]},"metadata":{},"sourceType":"module"}